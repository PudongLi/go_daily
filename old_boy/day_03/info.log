go课程第三天

2017/12/09

Author lipd
--------------------------------------------------------
上周作业
go的math/rand函数带有一个glob全局变量时间种子，如果不设置的话默认为1，每次生成的随机数都一样。
可以使用time时间戳来设置新的时间种子。
import (
"time"
"math/rand"
)
newTimeSource := rand.New(rand.NewSource(time.Now().Unix()))
--------------------------------------------------------
数组
声明方式：
var a = [5]int{1,2,3,4,5}
var a = [...]int{1,2,3,4}
var a = [5]{1:"age", 2:"name"} //1，2是元素下标
go数组特点：
1、定长，初始化时要声明长度
2、强制类型
3、在内存中占用一段连续的空间
4、长度也是数组的类型之一

example1:
ArrayName1 := [...]string{"lipd", "wangyiru", "hahaha"}
fmt.Printf("%v,%v %v \n", &ArrayName1[0], &ArrayName1[1], &ArrayName1[2])

输出：0xc042046270,0xc042046280 0xc042046290
example2:
var a[5]int = [5]int {1,2,3,4,5}
var b[6]int
b = a //报错


在go语言中数组属于值类型，所有的值类型在赋值和作为参数传递时都会产生一次复制动作。
如果将数组作为函数的参数类型，则在函数调用时该参数将发生数据复制。
因此在函数内部无法修改作为参数传递进来的数组的内容，因为函数操作的只是该数组的一个副本。

作业：用户输入长度 返回验证码
--------------------------------------------------------
切片
构成：地址引用,长度,容量（不指定时默认等于长度）
定义：
var a [] int
b = make([]int , 4, 5)

切片是引用类型,修改切片的值会影响原数组的值
切片在增加元素时，会在内存中开辟一段新的地址（长度等于len(old)+len(new)），将原来的元素拷贝过去，再追加新的元素

var a[5]int
var b = a[1:3]
b[0]=100
b[1]=200
则
a[0]=0
a[1]=100
数组切片支持Go语言的另一个内置函数 copy() ，用于将内容从一个数组切片复制到另一个
数组切片。如果加入的两个数组切片不一样大，就会按其中较小的那个数组切片的元素个数进行
复制。
--------------------------------------------------------
字符串的底层是用切片实现的   字符串是byte数组
字符串可以使用切片
字符串是不可变的

处理中文时不再使用byte，换为rune，rune按字符处理
一个中文三个字节
--------------------------------------------------------
获取当前时间
now := time.Now()
fmt.Printf("%02d%02d%02d\n", now.Hour(),now.Minute(), now.Second())
格式化输出

str := now.Format("2006/01/02 15:04:05")
now.time.UnixNano()
计算时间差使用time.Since()函数

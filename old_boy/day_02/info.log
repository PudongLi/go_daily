go课程第二天

2017/12/02

Author lipd
--------------------------------------------------------

go语言单引号里是字符

函数外不能写可只执行语句，可执行语句必须在函数内
下面代码是不被允许的
/*
var str string
str = "hello"
*/
下面代码是被允许的
/*
var str = "hello"
*/
--------------------------------------------------------
bool类型：
bool类型默认值为false,格式化输出 %t
--------------------------------------------------------
整数和浮点数：
int8 8位1字节，表示范围 -128-127,能表示的最大值为127，定义一个int8为128时会报错：constant 128 overflows int8
int8的值不能赋值给int32，必须进行类型转换(从小到大转的时候要注意是否超过最大值，避免溢出)，不能类型的变量也不能进行值运算

uint8 无符号，表示年龄时可以用unit  表示范围 0-255
int和unit和操作系统有关系
--------------------------------------------------------
浮点型分为float32和float64（定义时必须声明位数）

false是0，但0不是false
--------------------------------------------------------
复数类型
两种形式：complex64和complex128


万能占位符 %v,使用fmt.printf输出某个变量或常量，不知道值的类型的时候可以用%v
想输出'%'时用 '%%'
--------------------------------------------------------
位操作符
& |
<<左移(位数在右边)
1<<10=1024
1<<20=2^20

WeiboUser.go
微博特权与位操作
每一位代表一种特权

1000 0001
设置其中一位为1
用1左移 n位 与目标做或运算

设置其中一位为0
用1左移n位，与目标做异或运算

判断其中一位是否等于1
用1 左移n位与目标做&操作
--------------------------------------------------------
同一个包下的所有函数、变量、常量都是可见的(public)
--------------------------------------------------------
init函数
每一个go文件都可以有一个init函数，init函数最先执行
如果导入的包里有init函数，先执行导入的包里的init函数
_只初始化不引用（加载数据库驱动）
--------------------------------------------------------
常量使用const修饰，只能修饰boolean number string
常量的赋值是一个编译期行为，所以右值不能出现任何需要运行期才能得出结果的表达式（可以是常量表达式）

const里如果只声明不赋值，默认使用前一个表达式
iota遇到const重置为0，每一行都会递增，不论iota从哪开始，都是从第一行开始计
const (
        TestMin = -1
        TestA
        TestB = iota
        TestC

)
输出结果是 -1 -1 2 3
--------------------------------------------------------
time.Now.Unix()获取当前时间戳
--------------------------------------------------------
``反引号内的字符串会原样输出
`\n`可以多行
--------------------------------------------------------
if条件语句可以写成下面这种形式
if a := test();a > 200{
    do something
}

for range 遍历数组、切片、map、管道等类型
for index, val := range str{ //str可以是一个数组、切片、map(键值对的集合)、管道等

}
strings.index 返回目标字符在字符串中第一次出现的位置
import (
	"fmt"
	"strings"
)

func main() {
	str1 := "hello world"
	index1 := strings.Index(str1, "l")
	fmt.Printf("%v\n", index1)

}
将输出 2

strings.Split(str,分隔符)
strings.Join(str,连接符)
--------------------------------------------------------
读取输入
var number int
fmt.Scanf("%d", &number)
&number 将值写入变量的内存地址
--------------------------------------------------------



